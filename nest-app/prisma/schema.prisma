// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model UserGroups {
  id      Int      @id @default(autoincrement())
  name String
  isDeleted Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Users Users[]
  PaymentCategories PaymentCategories[]
}

model Users {
  id      Int      @id @default(autoincrement())
  name    String @unique
  loginId String @unique
  password String
  userGroup UserGroups @relation(fields: [userGroupId], references: [id])
  userGroupId Int
  themeColor String
  isDeleted Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  payments Payments[]
}

model PaymentCategories {
  id      Int      @id @default(autoincrement())
  name String @unique
  color String @unique
  userGroup UserGroups @relation(fields: [userGroupId], references: [id])
  userGroupId Int
  isDeleted Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  payments Payments[]
}

model Payments {
  id      Int      @id @default(autoincrement())
  name String
  price Int
  paymentDatetime DateTime
  paymentCategory PaymentCategories @relation(fields: [paymentCategoryId], references: [id])
  paymentCategoryId Int
  paymentUser Users @relation(fields: [paymentUserId], references: [id])
  paymentUserId Int
  loadRate Int
  isLiquidated Boolean @default(false)
  isDeleted Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

